package main

import "fmt"

//Паттерн "Фабричный метод" определяет интерфейс для создания объектов в суперклассе, позволяя подклассам
//изменять тип создаваемых объектов. Этот паттерн делегирует создание объектов подклассам, что позволяет
//использовать наследование для расширения возможностей объекта.
//
//Применимость
//Когда заранее неизвестны типы и зависимости объектов, с которыми должен работать код: фабричный метод
//позволяет делегировать создание объектов подклассам.
//Когда система должна быть независимой от процесса создания, композиции и представления продуктов:
//паттерн обеспечивает независимость, позволяя изменить способ создания объектов, не изменяя клиентский код.
//Когда требуется обеспечить создание различных вариаций объекта в зависимости от условий:
//фабричный метод позволяет создавать объекты динамически, в зависимости от условий или конфигурации.
//Плюсы
//Избавление от привязки к конкретным классам продуктов: паттерн позволяет использовать абстрактные типы
//и интерфейсы, что упрощает изменение и расширение кода.
//Принцип единственной обязанности: фабричный метод изолирует код создания объектов, что способствует соблюдению
//принципа единственной ответственности.
//Принцип открытости/закрытости: новые типы продуктов можно легко добавлять, не изменяя существующий
//клиентский код.
//Минусы
//Усложнение кода из-за введения дополнительных классов и интерфейсов: паттерн может привести к увеличению
//количества классов и усложнению структуры кода.
//Необходимость создания иерархий классов: введение фабричных методов требует создания иерархий классов, что
//может быть избыточным для простых приложений.
//Реальные примеры использования
//Пользовательские интерфейсы: фабричный метод используется для создания различных элементов интерфейса,
//таких как кнопки, окна и меню, в зависимости от платформы (Windows, macOS, Linux).
//Логирование: паттерн применяется для создания различных видов логгеров (файловый логгер, консольный логгер,
//сетевой логгер) в зависимости от конфигурации.
//Подключение к базам данных: фабричный метод используется для создания различных подключений к базам данных
//(MySQL, PostgreSQL, SQLite) в зависимости от настроек.

// Transport - интерфейс транспорта
type Transport interface {
	Drive() string
}

// Car - конкретный продукт (машина)
type Car struct{}

func (c Car) Drive() string {
	return "Езда на машине"
}

// Bike - конкретный продукт (велосипед)
type Bike struct{}

func (b Bike) Drive() string {
	return "Езда на велосипеде"
}

// TransportFactory - интерфейс фабрики
type TransportFactory interface {
	CreateTransport() Transport
}

// CarFactory - конкретная фабрика для создания машины
type CarFactory struct{}

func (cf CarFactory) CreateTransport() Transport {
	return Car{}
}

// BikeFactory - конкретная фабрика для создания велосипеда
type BikeFactory struct{}

func (bf BikeFactory) CreateTransport() Transport {
	return Bike{}
}

func main() {
	var factory TransportFactory

	// Создание машины
	factory = CarFactory{}
	transport := factory.CreateTransport()
	fmt.Println(transport.Drive())

	// Создание велосипеда
	factory = BikeFactory{}
	transport = factory.CreateTransport()
	fmt.Println(transport.Drive())
}
