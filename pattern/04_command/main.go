package main

import "fmt"

//Паттерн "Команда" (Command) инкапсулирует запрос в виде объекта, что позволяет параметризировать объекты
//с различными запросами, ставить запросы в очередь или протоколировать их, а также поддерживать отмену операций.
//
//Применимость
//Когда необходимо параметризовать объекты выполняемыми операциями: паттерн позволяет представить операции
//в виде объектов, которые могут быть переданы, сохранены и выполнены позже.
//Когда нужно ставить операции в очередь, протоколировать их или поддерживать отмену операций: паттерн "Команда"
//обеспечивает механизм для реализации таких функций.
//Когда система должна поддерживать выполнение операций в различных контекстах или временных промежутках:
//паттерн позволяет отложить выполнение операций или выполнить их в другом контексте.
//Плюсы
//Разделение запросов и объектов, которые их обрабатывают:
//инкапсуляция запросов в объекты команд облегчает их управление и обработку.
//Поддержка отмены и повторного выполнения операций: паттерн позволяет легко реализовать механизмы отмены и
//повторного выполнения команд.
//Простота добавления новых команд: новые команды могут быть добавлены без изменения существующего кода.
//Гибкость в управлении операциями: команды могут быть собраны в последовательности, поставлены в очередь,
//протоколированы или выполнены в разных контекстах.
//Минусы
//Усложнение кода: инкапсуляция запросов в объекты команд может привести к увеличению количества классов и
//усложнению кода.
//Избыточность: в некоторых случаях использование команд может быть избыточным, особенно если операции
//просты и не требуют сложного управления.
//Реальные примеры использования
//GUI приложения: команды используются для представления операций, связанных с действиями пользователя,
//такими как нажатие кнопок, и позволяют легко реализовать отмену и повторное выполнение действий.
//Системы управления транзакциями: команды используются для управления последовательностью операций,
//обеспечивая возможность отмены и повторного выполнения транзакций.
//Игровые движки: команды применяются для управления действиями игровых объектов, обеспечивая
//гибкость в управлении игровыми событиями.

// Command - интерфейс команды
type Command interface {
	Execute()
	Undo()
}

// Device - интерфейс устройства
type Device interface {
	TurnOn()
	TurnOff()
}

// Light - конкретное устройство (свет)
type Light struct{}

func (l *Light) TurnOn() {
	fmt.Println("Свет включен")
}

func (l *Light) TurnOff() {
	fmt.Println("Свет выключен")
}

// TurnOnCommand - команда включения устройства
type TurnOnCommand struct {
	device Device
}

func (c *TurnOnCommand) Execute() {
	c.device.TurnOn()
}

func (c *TurnOnCommand) Undo() {
	c.device.TurnOff()
}

// TurnOffCommand - команда выключения устройства
type TurnOffCommand struct {
	device Device
}

func (c *TurnOffCommand) Execute() {
	c.device.TurnOff()
}

func (c *TurnOffCommand) Undo() {
	c.device.TurnOn()
}

func main() {
	light := &Light{}

	turnOn := &TurnOnCommand{device: light}
	turnOff := &TurnOffCommand{device: light}

	// Включение света
	turnOn.Execute()

	// Выключение света
	turnOff.Execute()

	// Отмена выключения (включение света)
	turnOff.Undo()
}
